import React, { useState  } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
// import {
//   getAllEmployees,
//   addEmployee,
//   updateEmployee,
//   deleteEmployee,
// } from "./services/employeeService";
import "./EmployeeManagement.css";
import "./LoginDark.css";

const Login = ({ onLogin }) => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (username === "Sami" && password === "sami2804") {
      onLogin();
    } else {
      alert("Invalid credentials");
    }
  };

  return (
    <div className="login-dark d-flex align-items-center justify-content-center fade-in">
      <div className="card bg-dark text-light p-4 shadow slide-in" style={{ width: "400px" }}>
        <h2 className="mb-3 text-center text-info">Login</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Username</label>
            <input
              type="text"
              className="form-control bg-secondary text-light border-0"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="Enter username"
            />
          </div>
          <div className="mb-4">
            <label className="form-label">Password</label>
            <input
              type="password"
              className="form-control bg-secondary text-light border-0"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter password"
            />
          </div>
          <button type="submit" className="btn btn-info w-100 rounded-pill fw-bold">
            Login
          </button>
        </form>
      </div>
    </div>
  );
};


const EmployeeManagement = () => {
  const [employees, setEmployees] = useState([]);
  const [newEmployee, setNewEmployee] = useState({
    // id: "",
    name: "",
    position: "",
    department: "",
    email: ""
  });
  
  const [editIndex, setEditIndex] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  // useEffect(() => {
  //   getAllEmployees()
  //     .then((res) => setEmployees(res.data))
  //     .catch((err) => console.error("Error fetching employees:", err));
  // }, []);

  const handleChange = (e) => {
    setNewEmployee({ ...newEmployee, [e.target.name]: e.target.value });
  };
// for autogeneration of ID
  const handleAdd = () => {
  if (newEmployee.name && newEmployee.position) {
    const autoGeneratedId = Date.now().toString(); 
    const employeeWithId = { ...newEmployee, id: autoGeneratedId };
    setEmployees([...employees, employeeWithId]);
    setNewEmployee({  name: "", position: "", department: "", email: "" });
  }
};


  // const handleAdd = () => {
  //   if (newEmployee.name && newEmployee.position) {
  //     setEmployees([...employees, newEmployee]);
  //     setNewEmployee({ id: "", name: "", position: "", department: "", email: "" });
  //   }
  // };

  // const handleAdd = () => {
  //   if (newEmployee.name && newEmployee.position) {
  //     addEmployee(newEmployee)
  //       .then(() => {
  //         getAllEmployees().then((res) => setEmployees(res.data));
  //         setNewEmployee({ id: "", name: "", position: "", department: "", email: "" });
  //       })
  //       .catch((err) => console.error("Error adding employee:", err));
  //   }
  // };

  const handleEdit = (index) => {
    setNewEmployee(employees[index]);
    setEditIndex(index);
  };

   const handleUpdate = () => {
    const updatedEmployees = employees.map((emp, idx) =>
      idx === editIndex ? newEmployee : emp
    );
    setEmployees(updatedEmployees);
    setNewEmployee({  name: "", position: "", department: "", email: "" });
    setEditIndex(null);
  };

  // const handleUpdate = () => {
  //   const emp = newEmployee;
  //   updateEmployee(emp.id, emp)
  //     .then(() => {
  //       getAllEmployees().then((res) => setEmployees(res.data));
  //       setNewEmployee({ id: "", name: "", position: "", department: "", email: "" });
  //       setEditIndex(null);
  //     })
  //     .catch((err) => console.error("Error updating employee:", err));
  // };

  // const handleDelete = (index) => {
  //   setEmployees(employees.filter((_, idx) => idx !== index));
  // };

const handleDelete = (index) => {
    setEmployees(employees.filter((_, idx) => idx !== index));
  };
  
  // const handleDelete = (id) => {
  //   deleteEmployee(id)
  //     .then(() => {
  //       getAllEmployees().then((res) => setEmployees(res.data));
  //     })
  //     .catch((err) => console.error("Error deleting employee:", err));
  // };


  const handleLogout = () => {
    setIsLoggedIn(false);
    setNewEmployee({ id: "", name: "", position: "", department: "", email: "" });
    setEmployees([]);
    setEditIndex(null);
  };

  if (!isLoggedIn) {
    return <Login onLogin={() => setIsLoggedIn(true)} />;
  }

  return (
    <div className="container mt-5 employee-management">
  <div className="d-flex justify-content-between align-items-center mb-4">
    <h2>Employee Management</h2>
    <button className="btn btn-outline-secondary" onClick={handleLogout}>
      Logout
    </button>
  </div>

  <div className="card mb-4 shadow">
    <div className="card-body">
      <h4 className="card-title">Add / Edit Employee</h4>
      <div className="row g-3">
        {/* <div className="col-md-6">
          <input
            type="text"
            name="id"
            className="form-control"
            placeholder="Employee ID"
            value={newEmployee.id}
            onChange={handleChange}
            disabled={editIndex !== null}
          />
        </div> */}
        <div className="col-md-6">
           <input
            type="text"
            name="id"
            className="form-control"
            placeholder="Auto-generated ID"
            value={editIndex !== null ? newEmployee.id : " "}
            disabled
         />
        </div>

        <div className="col-md-6">
          <input
            type="text"
            name="name"
            className="form-control"
            placeholder="Name"
            value={newEmployee.name}
            onChange={handleChange}
            disabled={editIndex !== null}
          />
        </div>
        <div className="col-md-6">
          <input
            type="text"
            name="email"
            className="form-control"
            placeholder="Email"
            value={newEmployee.email}
            onChange={handleChange}
            disabled={editIndex !== null}
          />
        </div>
        <div className="col-md-6">
          <input
            type="text"
            name="department"
            className="form-control"
            placeholder="Department"
            value={newEmployee.department}
            onChange={handleChange}
          />
        </div>
        <div className="col-md-6">
          <input
            type="text"
            name="position"
            className="form-control"
            placeholder="Position"
            value={newEmployee.position}
            onChange={handleChange}
          />
        </div>
        <div className="col-md-6 d-flex align-items-end">
          {editIndex === null ? (
            <button className="btn btn-primary w-100" onClick={handleAdd}>Add Employee</button>
          ) : (
            <button className="btn btn-success w-100" onClick={handleUpdate}>Update Employee</button>
          )}
        </div>
      </div>
    </div>
  </div>

  <div className="card shadow">
    <div className="card-body">
      <h4 className="card-title">Employee List</h4>
      {employees.length === 0 ? (
        <p className="text-muted">No employees added yet.</p>
      ) : (
        employees.map((emp, index) => (
          <div key={index} className="d-flex justify-content-between align-items-center border p-3 mb-3 rounded employee-item">
            <div>
              <strong>{emp.name} (ID: {emp.id})</strong>
              <div>Email: {emp.email}</div>
              <div>Department: {emp.department}</div>
              <div >Position: {emp.position}</div>
            </div>
            <div>
              <button className="btn btn-sm btn-warning me-2" onClick={() => handleEdit(index)}>Edit</button>
              <button className="btn btn-sm btn-danger" onClick={() => handleDelete(index)}>Delete</button>
            </div>
          </div>
        ))
      )}
    </div>
  </div>
</div>
  );
};

export default EmployeeManagement;
